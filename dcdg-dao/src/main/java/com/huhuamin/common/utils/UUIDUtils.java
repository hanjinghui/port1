package com.huhuamin.common.utils;import com.fasterxml.uuid.Generators;import org.apache.commons.lang3.time.FastDateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Random;import java.util.UUID;/** * @Author 胡化敏 * @Description: * @Date Create 2017/11/16 13:00 * @Modified By: * @Since: */public class UUIDUtils {    public static final FastDateFormat ISO_DATETIME_TIME_ZONE_FORMAT = FastDateFormat.getInstance("yyyy-MM-dd HH:mm:ss.SSS+0800");    public static final FastDateFormat ISO_NAME_DATE_ZONE_FORMAT = FastDateFormat.getInstance("yyyy-MM-dd");    public static final FastDateFormat ISO_NAME_DATE_TIME_NO_FORMAT = FastDateFormat.getInstance("yyyyMMddHHmmss");    public static String[] chars = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7",            "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};    /**     * 订单号的生成 yyyyMMddHHmmss+8位UUID     *     * @return     */    public static String generateUuid22() {        StringBuffer shortBuffer = new StringBuffer();        String uuid = UUID.randomUUID().toString().replace("-", "");        for (int i = 0; i < 8; i++) {            String str = uuid.substring(i * 4, i * 4 + 4);            int x = Integer.parseInt(str, 16);            shortBuffer.append(chars[x % 0x3E]);        }        return ISO_NAME_DATE_TIME_NO_FORMAT.format(new Date()).concat(shortBuffer.toString());    }    /**     * 订单号的生成 yyMMddHHmmss+8位UUID     *     * @return     */    public static String generateUuid20() {        StringBuffer shortBuffer = new StringBuffer();        String uuid = UUID.randomUUID().toString().replace("-", "");        for (int i = 0; i < 8; i++) {            String str = uuid.substring(i * 4, i * 4 + 4);            int x = Integer.parseInt(str, 16);            shortBuffer.append(chars[x % 0x3E]);        }        SimpleDateFormat format = new SimpleDateFormat("yyMMddHHmmss");        return ISO_NAME_DATE_TIME_NO_FORMAT.format(new Date()).concat(shortBuffer.toString());    }    public static String genertateUuid32() {        UUID uuid = Generators.timeBasedGenerator().generate();        return uuid.toString().replace("-", "");    }    public static String genertateUuidLong() {        UUID uuid = Generators.timeBasedGenerator().generate();        return String.valueOf(uuid.timestamp());    }    /**     * 8位uuid     *     * @return     */    public static String generateUuid() {        StringBuffer shortBuffer = new StringBuffer();        String uuid = UUID.randomUUID().toString().replace("-", "");        for (int i = 0; i < 8; i++) {            String str = uuid.substring(i * 4, i * 4 + 4);            int x = Integer.parseInt(str, 16);            shortBuffer.append(chars[x % 0x3E]);        }        return shortBuffer.toString();    }    /**     * 验证码     *     * @return     */    public static synchronized String generateValidCode() {        return String.valueOf((int) ((Math.random() * 9 + 1) * 1000));    }    public static synchronized String generateValidCode6() {        return String.valueOf((int) ((Math.random() * 9 + 1) * 100000));    }    public static void main(String[] args) {        for(int i=0;i<10;i++){            String ss = genertateUuid32();            System.out.println(ss);        }    }    /**     * 生成随机字符串     *     * @return     */    public static String create_nonce_str() {        String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";        String res = "";        for (int i = 0; i < 16; i++) {            Random rd = new Random();            res += chars.charAt(rd.nextInt(chars.length() - 1));        }        return res;    }    /**     * 时间戳     *     * @return     */    public static String create_timestamp() {        return Long.toString(new Date().getTime());    }}