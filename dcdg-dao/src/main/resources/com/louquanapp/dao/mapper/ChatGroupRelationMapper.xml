<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.louquanapp.dao.mapper.ChatGroupRelationMapper">
  <resultMap id="BaseResultMap" type="com.louquanapp.dao.model.ChatGroupRelation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 23 17:06:55 CST 2019.
    -->
    <id column="RELATION_ID" jdbcType="CHAR" property="relationId" />
    <result column="GROUP_ID" jdbcType="CHAR" property="groupId" />
    <result column="CUST_ID" jdbcType="CHAR" property="custId" />
    <result column="CUST_GROUP_NICK_NAME" jdbcType="VARCHAR" property="custGroupNickName" />
    <result column="RELATION_STATUS" jdbcType="TINYINT" property="relationStatus" />
    <result column="ADD_TIME" jdbcType="TIMESTAMP" property="addTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap id="BaseResultExtraMap" type="com.louquanapp.dao.model.ChatGroupRelation" extends="BaseResultMap">
    <result column="HEAD_IMG" jdbcType="VARCHAR" property="headImg" />
    <result column="NICK_NAME" jdbcType="VARCHAR" property="nickName" />
      <result column="FRIEND_ID" jdbcType="VARCHAR" property="friendId" />


  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 23 17:06:55 CST 2019.
    -->
    delete from base_chat_group_relation
    where RELATION_ID = #{relationId,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.louquanapp.dao.model.ChatGroupRelation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 23 17:06:55 CST 2019.
    -->
    insert into base_chat_group_relation (RELATION_ID, GROUP_ID, CUST_ID, 
      CUST_GROUP_NICK_NAME, RELATION_STATUS, ADD_TIME, 
      UPDATE_TIME)
    values (#{relationId,jdbcType=CHAR}, #{groupId,jdbcType=CHAR}, #{custId,jdbcType=CHAR}, 
      #{custGroupNickName,jdbcType=VARCHAR}, #{relationStatus,jdbcType=TINYINT}, #{addTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.louquanapp.dao.model.ChatGroupRelation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 23 17:06:55 CST 2019.
    -->
    update base_chat_group_relation
    set GROUP_ID = #{groupId,jdbcType=CHAR},
      CUST_ID = #{custId,jdbcType=CHAR},
      CUST_GROUP_NICK_NAME = #{custGroupNickName,jdbcType=VARCHAR},
      RELATION_STATUS = #{relationStatus,jdbcType=TINYINT},
      ADD_TIME = #{addTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
    where RELATION_ID = #{relationId,jdbcType=CHAR}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 23 17:06:55 CST 2019.
    -->
    select RELATION_ID, GROUP_ID, CUST_ID, CUST_GROUP_NICK_NAME, RELATION_STATUS, ADD_TIME, 
    UPDATE_TIME
    from base_chat_group_relation
    where RELATION_ID = #{relationId,jdbcType=CHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Apr 23 17:06:55 CST 2019.
    -->
    select RELATION_ID, GROUP_ID, CUST_ID, CUST_GROUP_NICK_NAME, RELATION_STATUS, ADD_TIME, 
    UPDATE_TIME
    from base_chat_group_relation
  </select>

  <!--根据群ID查询聊天好友群关系-->
  <select id="queryChatGroupRelationByGroupId" resultMap="BaseResultMap">
    select RELATION_ID, GROUP_ID, CUST_ID, CUST_GROUP_NICK_NAME, RELATION_STATUS, ADD_TIME
    from base_chat_group_relation
    where  GROUP_ID = #{groupId,jdbcType=CHAR}

  </select>


  <!--根据群ID查询用户id 用户在群里的昵称  状态-->
  <select id="queryCustIdAndNickNameAndStatusByGroupId" resultMap="BaseResultMap">
    select CUST_ID,CUST_GROUP_NICK_NAME,RELATION_STATUS
    from base_chat_group_relation
    where  GROUP_ID = #{groupId,jdbcType=CHAR}

  </select>

  <!--根据custId groupId查询用户id 用户在群里的昵称  状态-->
  <select id="queryCustIdAndNickNameAndStatusByCustId" resultMap="BaseResultMap">
    select CUST_ID,CUST_GROUP_NICK_NAME,RELATION_STATUS,RELATION_ID
    from base_chat_group_relation
    where  CUST_ID = #{custId,jdbcType=CHAR}  and GROUP_ID = #{groupId,jdbcType=CHAR}

  </select>


  <update id="updateSelectByPrimaryKey" parameterType="com.louquanapp.dao.model.ChatGroupRelation">

    update base_chat_group_relation
    <set>
      <if test="custGroupNickName != null and custGroupNickName != '' ">
        CUST_GROUP_NICK_NAME = #{custGroupNickName,jdbcType=VARCHAR},
      </if>
      <if test="relationStatus != null">
        RELATION_STATUS = #{relationStatus,jdbcType=TINYINT},
      </if>
    </set>
    where RELATION_ID = #{relationId,jdbcType=CHAR}
    and  CUST_ID = #{custId,jdbcType=CHAR}

  </update>


    <!--聊天群多用户添加-->
    <insert id="insertList"  parameterType="java.util.List" >

        insert into base_chat_group_relation (RELATION_ID, GROUP_ID, CUST_ID,
        CUST_GROUP_NICK_NAME, RELATION_STATUS, ADD_TIME) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.relationId}, #{item.groupId}, #{item.custId},
            #{item.custGroupNickName}, #{item.relationStatus}, #{item.addTime})
        </foreach>


    </insert>


  <!--聊天群选择联系人列表-->
  <select id="chatGroupMembers" resultMap="BaseResultExtraMap">
        select a.FRIEND_ID,  b.HEAD_IMG,b.NICK_NAME from dcdg_basic_chat_base  a
     left join dcdg_bussiness_customer_base b  on a.FRIEND_ID=b.CUST_ID  where
			a.CHAT_STATUS = 1 and a.cust_id=  #{custId,jdbcType=CHAR} and a.FRIEND_ID not in
	(select  CUST_ID  from base_chat_group_relation   where GROUP_ID = #{groupId,jdbcType=CHAR})

  </select>


    <!--检查聊天群选择联系人的数量-->
    <select id="checkChatGroupMembersNum"    parameterType="java.util.List"  resultType="java.lang.Integer">
        select count(FRIEND_ID) from (
            select a.FRIEND_ID from dcdg_basic_chat_base  a
         left join dcdg_bussiness_customer_base b  on a.FRIEND_ID=b.CUST_ID  where
                a.cust_id=  #{custId,jdbcType=CHAR} and a.FRIEND_ID not in
        (select  CUST_ID  from base_chat_group_relation   where GROUP_ID = #{groupId,jdbcType=CHAR})
        )  m  where FRIEND_ID in
        <foreach collection="list" item="id" open="(" separator=","
                 close=")">#{id}
        </foreach>


  </select>
    <!--删除用户在聊天群关系中的关系-->
    <delete id="delChatGroupRelationByCustIdAndGroupId" >
            delete from base_chat_group_relation where GROUP_ID = #{groupId,jdbcType=CHAR}
            and CUST_ID = #{custId,jdbcType=CHAR}
    </delete>

  <!--删除群成员与群的关系-->
  <delete id="delChatGroupRelationByGroupId" >
            delete from base_chat_group_relation where GROUP_ID = #{groupId,jdbcType=CHAR}
    </delete>

  <!--根据groupId 查询群员信息-->
  <select id="queryChatGroupMembersByGroupId" parameterType="String" resultMap="BaseResultExtraMap" >
      select a.CUST_ID  FRIEND_ID,a.RELATION_STATUS,  b.HEAD_IMG,b.NICK_NAME from base_chat_group_relation  a
     left join dcdg_bussiness_customer_base b  on a.CUST_ID=b.CUST_ID
      where a.GROUP_ID = #{groupId,jdbcType=CHAR}
  </select>

</mapper>